# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  container-job:
    runs-on: ubuntu-latest
    # Docker Hub image that `container-job` executes in
    container: golang:1.22-alpine

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: root
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
    steps:
    - uses: actions/checkout@v4
    - name: Install PostgreSQL client
      run: |
        apk --update add postgresql-client
      
    - name: Query database
      run: psql -h postgres -d postgres -U root -c 'CREATE DATABASE haventest;'
      env:
        # postgress password is required; alternatively, you can run:
        # `PGPASSWORD=postgres_password psql ...`
        PGPASSWORD: postgres

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22.x'
    - name: Install dependencies
      run: |
        go get .

    - name: Build
      run: go build -v ./...

    - name: Test
      env: 
        DB_HOST: postgres
        DB_USER: root
        DB_PASS: postgres
        DB_NAME: haventest
      run: go test -v ./...
    
    - name: generate test coverage
      env: 
          DB_HOST: postgres
          DB_USER: root
          DB_PASS: postgres
          DB_NAME: haventest
      run: go test ./... -coverprofile=./cover.out -covermode=atomic -coverpkg=./...

    - name: check test coverage
      uses: vladopajic/go-test-coverage@v2
      with:
        # Configure action using config file (option 1)
        config: ./.testcoverage.yml
